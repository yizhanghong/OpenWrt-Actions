# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
# chmod +x /etc/init.d/netspeedtest

name: Lean-all-iStore

on:
  #schedule:
  #  - cron: 0 22 * * *

  release:
    types: [published]
  
  watch:
    types: [started]

  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
        
      CACHE_BUILD:
        description: '缓存加速'
        required: false
        default: 'true'
        type: boolean


    
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config/OpenWrt-CI.info
  Firmware_Name: Lean-all-iStore
  DIY_P1_SH: smpackage/Lean-all-iStore-1.sh
  DIY_P2_SH: smpackage/Lean-all-iStore-2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_BUILDINFO: true
  UPLOAD_PACKAGE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  GITHUB_TOKEN: ${{ secrets.GIT_USER_TOKEN }}
  TZ: Asia/Shanghai  

jobs:

  build_openwrt:


    name: Lean-all-iStore
    
    runs-on: Ubuntu-22.04
    
    steps:

      - name: 释放磁盘空间
        uses: endersonmenezes/free-disk-space@v2
        with:
          remove_android: true
          remove_dotnet: true
          remove_haskell: true
          remove_tool_cache: true
          remove_swap: true
          remove_packages: "azure-cli google-cloud-cli microsoft-edge-stable google-chrome-stable firefox postgresql* temurin-* *llvm* mysql* dotnet-sdk-*"
          remove_packages_one_command: true
          remove_folders: "/usr/share/swift /usr/share/miniconda /usr/share/az* /usr/share/glade* /usr/local/lib/node_modules /usr/local/share/chromium /usr/local/share/powershell"
          testing: false
        
      - name: 初始化系统环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # docker rmi `docker images -q`
          # sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          # sudo -E apt-mark hold grub-efi-amd64-signed
          # sudo -E apt update
          # sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          # sudo -E apt -y full-upgrade
          # sudo -E apt -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          # sudo -E apt -y install rename
          # sudo -E systemctl daemon-reload
          # sudo -E apt -y autoremove --purge
          # sudo -E apt clean
          # sudo -E timedatectl set-timezone "Asia/Shanghai"


          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev rename
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir  

      - name: 更新时区、编译时间
        id: date
        run: |
          sudo timedatectl set-timezone "$TZ"
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          echo "FILE_TIME=$(date +"%m-%d %H.%M")" >> $GITHUB_ENV
          echo "FILE_TIME1=$(date "+%Y年%m月%d日-%H点%M分")" >> $GITHUB_ENV
          echo "FILE_TIME2=$(date "+%Y%m%d-%H%M")" >> $GITHUB_ENV
          echo "编译开始时间..."
          START_TIME=`date +'%Y-%m-%d %H:%M:%S'`
          echo "START_SECONDS=$(date --date="$START_TIME" +%s)" >> $GITHUB_ENV

      - name: 准备完成
        uses: actions/checkout@v4

      - name: 下载源代码
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: 缓存
        uses: klever1988/cachewrtbuild@main
        if: env.CACHE_BUILD == 'true' || (github.event.inputs.CACHE_BUILD == 'true')
        with:
          ccache: 'true'
          mixkey: '${{ env.Firmware_Name }}'
          prefix: ${{ github.workspace }}/openwrt

      - name: patch1补丁和自定义设置
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: 更新源 #Update feeds
        run: cd openwrt && ./scripts/feeds update -a
          
      - name: 安装源 #Install feeds
        run: |
          cd openwrt
          ./scripts/feeds install -a
          ./scripts/feeds install -d y -p istore luci-app-store  

      - name: patch2补丁和自定义设置
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: 输出编译信息
        run: |
          cd openwrt
          echo " 系统空间      类型   总数  已用  可用 使用率"
          df -hT $PWD
            
          echo
          echo "=========================================="
          echo

          ZZZ="package/lean/default-settings/files/zzz-default-settings"
          echo "DISTRIB_REVISION=$(cat $ZZZ|grep DISTRIB_REVISION= | sed 's/^.\{24\}//g' | sed 's/.\{26\}$//')" >> $GITHUB_ENV
          echo "KERNEL_PATCHVER=$(cat target/linux/ipq40xx/Makefile|grep KERNEL_PATCHVER | sed 's/^.\{17\}//g')" >> $GITHUB_ENV
          echo "	    当前编译版本：$(cat $ZZZ|grep DISTRIB_REVISION= | sed 's/^.\{24\}//g' | sed 's/.\{26\}$//')"
          echo "	    内核版本：$(cat target/linux/ipq40xx/Makefile|grep KERNEL_PATCHVER | sed 's/^.\{17\}//g')"

          echo
          echo "=========================================="

          grep -i CONFIG_PACKAGE_luci-app .config | grep  -v \# > Plug-in
          grep -i CONFIG_PACKAGE_luci-theme .config | grep  -v \# >> Plug-in
          sed -i '/INCLUDE/d' Plug-in > /dev/null 2>&1
          sed -i 's/CONFIG_PACKAGE_/、/g' Plug-in
          sed -i '/Transparent_Proxy/d' Plug-in > /dev/null 2>&1 #排除 luci-app-passwall_Transparent_Proxy
          sed -i '/qbittorrent-simple_dynamic/d' Plug-in > /dev/null 2>&1 #排除 luci-app-qbittorrent-simple_dynamic
          sed -i 's/=y/\ /g' Plug-in
          awk '$0=NR$0' Plug-in > Plug-2
          awk '{print "	" $0}' Plug-2 > Plug-in

          echo
          echo
          echo "	      已选插件列表"
          cat Plug-in
          rm -rf {Plug-in,Plug-2}

          echo
          echo "=========================================="

          echo
          echo
          echo "输出完整插件信息..."
          echo
          echo
          cat .config

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      
      - name: 下载固件包
        id: package
        if: (!cancelled())
        run: |
          cd openwrt
          make defconfig
          make download -j$(($(nproc)+1))
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;        

      - name: 编译固件
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
      # - name: 检查空间使用情况
      #   if: steps.compile.outputs.status == 'success' && !cancelled()
      #   run: df -hT

      # - name: SSH connection to Actions
      #   uses: P3TERX/ssh2actions@v1.0.0
      #   if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      #   env:
      #     TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      #     TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}  

      - name: 整理文件
        id: organize
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          # rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 上传完整固件目录
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true' && !cancelled()
        with:
          name: ${{ env.Firmware_Name }}_${{ env.REPO_BRANCH }}_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}
          
      - name: 整理固件文件
        id: artifact
        if: steps.compile.outputs.status == 'success' && !cancelled()
        run: |
          cd openwrt
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
          cp -rf ./.config ./artifact/buildinfo/${{ env.Firmware_Name }}.info
          cp -rf ./.config ./artifact/firmware/${{ env.Firmware_Name }}.info
          cp -rf ./feeds.conf.default ./artifact/buildinfo/
          cd artifact/firmware/
          rename "s/openwrt/${{ env.Firmware_Name }}/" *
 
       
      - name: 上传固件
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.Firmware_Name }}_${{ env.REPO_BRANCH }}_firmware_${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/artifact/firmware/

      - name: 上传配置文件
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BUILDINFO == 'true' && !cancelled()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.Firmware_Name }}_${{ env.REPO_BRANCH }}_buildinfo${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/artifact/buildinfo/

      - name: 上传插件
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_PACKAGE == 'true' && !cancelled()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.Firmware_Name }}_${{ env.REPO_BRANCH }}_package${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/artifact/package/

      - name: 生成发布标签
        id: tag
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d.%H.%M")-${{ env.Firmware_Name }}" >> $GITHUB_OUTPUT
          echo "release_date=$(date +"%Y.%m.%d.%H.%M")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "
          ★ 源码 : https://github.com/coolsnowwolf/lede
          ★ 分支 : master
          ★ 感谢源码作者无私分享！
          
          ⏰ 编译时间：${{ env.FILE_TIME1 }}
          
          🎈 内核版本：${{ env.KERNEL_PATCHVER }}
          
          🎉 编译版本：${{ env.DISTRIB_REVISION }}
          
          🖥 管理地址：192.168.1.1 
          
          🌴 名称：root
          
          🛠 密码：password" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT
      
      - name: 自动发布固件到 Releases
        uses: softprops/action-gh-release@v2
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_USER_TOKEN }}
        with:
          name: ${{ steps.tag.outputs.release_date }} ${{ env.Firmware_Name }} ${{ env.name }}
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: openwrt/artifact/firmware/*

      # - name: 删除运行记录
      #   uses: Mattraks/delete-workflow-runs@v2
      #   if: steps.compile.outputs.status == 'success' && !cancelled()
      #   continue-on-error: true
      #   with:
      #     retain_days: 3     #保留最后多少记录不删除
      #     keep_minimum_runs: 0

      - name: 删除自动发布的旧固件
        uses: dev-drprasad/delete-older-releases@v0.3.3
        continue-on-error: true
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 20        #保留多少个releases不删除
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  
